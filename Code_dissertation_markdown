---
title: "Investigation of Prescription Flows between
General Practices and Boots Pharmacies via
Spatial Interaction Modeling Techniques"
author: "Lenka Hasova"
output: html_document
fig_caption: yes
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# instaling packages
```{r eval=FALSE, echo=FALSE, message=FALSE, warning=FALSE,results = 'hide'}
install.packages('downloader')
install.packages('stplanr')
install.packages('tidyr')
install.packages('spatialEco')
install.packages('Metrics')
```

# packages
```{r echo=FALSE, message=FALSE, warning=FALSE,results = 'hide'}
library(spatialEco)
library(sp)
library(MASS)
library(reshape2)
library(rgdal)
library(downloader)
library(maptools)
library(dplyr)
library(broom) 
library(ggplot2)
library(leaflet)
library(tidyr)
library(stringr)
library(spgwr)
library(RColorBrewer)
library(classInt)
library(gridExtra)
library(car)
library(arm)
library(spatstat)
library(grid)
library(ggmap)
library(lme4)
library(plyr)
library(stplanr)
library(SDraw)
library(Metrics)
```



# **This a documentation of R code used for the dissertation research project for Boots company.**

## It consists of 2 sections

1. Data processing  
      + Loading data
      + Cleaning data
2. Modelling time
      + Modelling all the flows - full description in steps
      + Modeling other selections
      
## The models are coded in following order and names, therefore use ctr+f if you want to find a particular section

```{r echo=FALSE, message=FALSE, warning=FALSE}
library(knitr)
library(kableExtra)
# help table
selection <- read.csv(file="E:/Dissertation/r/r_boots/code_to_git/selection.csv", header=TRUE,  stringsAsFactors = FALSE)

kable(selection) %>%
  kable_styling(bootstrap_options = c("striped", "hover"))
```

# Data processing
## Load the data and make them right coordinates
####Here a note must be given to preprocessing through ArcGIS.
####The pharmacy and GP's shapefile

```{r message=FALSE, warning=FALSE}
# flows
flbo <- read.csv(file="E:/Dissertation/Boots stuff/full_pharmacy_to_surgery_items.csv", header=TRUE,  stringsAsFactors = FALSE)
# general practicioners
gps <- readOGR(dsn = "E:/Dissertation/written2", layer = "gps_points_covariates", stringsAsFactors = FALSE)
# boots phar
boots <- readOGR(dsn = "E:/Dissertation/written2", layer = "boots_points_covariates", stringsAsFactors = FALSE)
# merseyside boundary
mersey <- readOGR(dsn = "E:/Dissertation/geo", layer = "BOUND_MER", stringsAsFactors = FALSE)
# centre
centre <- readOGR(dsn= "E:/school back up/THG/green", layer = "Liverpool_Central") # Liverpool Central station

# define projection british national grid, in metres
latlong = "+init=epsg:27700"

# aaply to all shapefiles
gps = spTransform(gps, CRS(latlong))
boots = spTransform(boots, CRS(latlong))
mersey = spTransform(mersey, CRS(latlong))
centre = spTransform(centre, CRS(latlong))
gps = spTransform(gps, CRS(latlong))
boots = spTransform(boots, CRS(latlong))

# correct names of pharmacies for fututre join andpersonal recognition
names(boots) <- c("BO_OBJECTID_1", "OBJECTID_2", "OBJECTID",   "BO_Store_No"  , "BO_ODS_Code" ,  "BO_Display_Na" ,"BO_Type",       "BO_Format" ,    "BO_NHS_Desc" ,  "BO_NEAR_FID" ,  "BO_distance_t", "BO_retail_are", "BO_attr"  ,     "OBJECTID_3" ,"Ph_ODS"  ,   "BO_Name" ,   "BO_HQ_Name"  ,  "BO_Addr"   , "BO_Strt",    "BO_PCNS"   , "BO_Items" ,   "BO_Type" ,   "BO_I_PY",    "BO_Chng" , "FID_"   ,    "OBJECTID_4", "ObjectID_5", "BO_FacilityID", "BO_n_competitors", "BO_py_competitors" ,    "BO_py_boots_comp"  ,   "BO_number_boo_comp"   , "BO_night_coun", "BO_day_pop",    "BO_elders",     "BO_ethnics"  , "BO_no_car"  ,   "BO_MEAN_imd_s", "BO_MEAN_incom" ,"BO_MEAN_emplo", "BO_MEAN_educa", "BO_MEAN_healt", "BO_MEAN_housi", "BO_MEAN_livin", "BO_MEAN_idaci" ,"BO_MEAN_idaop")

# cut the columns for neccesary (recomended to do before renaming)
A_boots <- boots[c(1,4:13,15:24,29:46)]

# same for the GP's
names(gps) <- c( "GP_OBJECTID",   "GP_ODS" ,    "GP_Name" ,   "GP_Street" , "GP_Address","GP_PCNS"  ,  "GP_Items"  , "GP_Flag" ,   "GP_Partners" ,  "Open_Date" , "Close_Date", "GP_Setting"   , "GP_Items_PY"  , "GP_Change" , "GP_pop_tot"  ,  "GP_elders"  ,   "GP_ethnics"   , "GP_no_car"   ,  "OBJECTID_1" ,"FacilityID" ,"GP_MEAN_imd_score", "GP_MEAN_incom", "GP_MEAN_emplo","GP_MEAN_educa", "GP_MEAN_healt", "GP_MEAN_housi", "GP_MEAN_livin", "GP_MEAN_idaci" ,"GP_MEAN_idaop", "Shape_Leng", "Shape_Area")
A_gps <- gps[c(1:9,12:18,21:29)]
```


## Cleaning the flows 
 
```{r message=FALSE, warning=FALSE}
# Create a year field
# extract the year from the date string
flbo$Year <- str_sub(flbo$Month, 1, str_length(flbo$Month)-2)

# create the month as a valuable date to explore the temporal pattern
flbo$Month<- paste(flbo$Month,01,sep="")
flbo$Month <- as.Date(as.character(flbo$Month), format = "%Y%m%d")

# extracting just 2017 data
a <- flbo[which(flbo$Year == "2017"),]

# Extracting just data for pharmacies that has full year data (12 flows)
counts <- ddply(a, .(a$Ph_ODS, a$GP_ODS), nrow)
names(counts) <- c("Ph_ODS", "GP_ODS", "Freq")
full_year <- counts[which(counts$Freq == '12'),]
counts2 <- merge(a, full_year, by.x=c("Ph_ODS", "GP_ODS"), by.y=c("Ph_ODS", "GP_ODS"), all.x = TRUE)
final_full <- counts2[which(counts2$Freq == '12'),]

# clean data to defined points
# merge with shp and flow 
# this will ensure there are just the pharmacies and GP's that are also in flow data, all the others will be omitted
fl2 <- merge(final_full, A_gps@data, all.y = T, by = "GP_ODS")
flow <- merge(fl2, A_boots@data, all.x = T, by = "Ph_ODS")
```




### aggregate for summary on 1 line amd create line

```{r message=FALSE, warning=FALSE}
# cutting the unnecessary columns  in our point data
A_boots <- A_boots[c(12,1:11,13:39)]
A_gps <- A_gps[c(2,1,3:25)]

# aggregate the flow for one line per year
ag1 <- data.frame(aggregate(Items ~ GP_ODS + Ph_ODS ,data=flow, sum))

# create line between the poins
# notice the composition of the function
# flow = dataframe with first and second columns representing origin and destination ID's 
# zones = spatialdataframe with first column orgin ID's
# destinations = spatialpointdataframe with first column destination ID's
# this function is very sensitive to NA's and excessive rows, make sure that number of origins and destinations in SPDF's is the same as in flow DF
line <- od2line(flow = ag1, zones = A_gps, destinations = A_boots)

# calculate lenght of the flow
# as we used OSGB projection, this is in metres
line$distance <- lineLength(line, byid = T)
```


### merge back with OD info

```{r message=FALSE, warning=FALSE}
# add the info of the points to our final data
agsp <- merge(line, A_gps@data, all.y = T, by = "GP_ODS")
agsp <- merge(agsp, A_boots@data, all.y = T, by = "Ph_ODS", duplicateGeoms = TRUE)

# crate points from flow
# although the SIM models are happy to run just on dataframe, werequire spatial visualization of the effect of each pharmacy and so we attach the dataframe to pharmacy points
GFL <- merge(A_boots, agsp@data, all.y = T, duplicateGeoms = TRUE)

# correct into numeric fields what needs to be numeric
GFL$GP_Items_PY <- as.numeric(GFL$GP_Items_PY)
GFL$GP_Partners <- as.numeric(GFL$GP_Partners)
GFL$GP_Change <- as.numeric(GFL$GP_Change)
GFL$BO_I_PY <- as.numeric(GFL$BO_I_PY)
GFL$BO_Chng <- as.numeric(GFL$BO_Chng)
GFL$BO_n_competitors <- as.numeric(GFL$BO_n_competitors)
GFL$BO_py_boots_comp <- as.numeric(GFL$BO_py_boots_comp)

# calculate fields into a same format, required for traditional model investigating effect of the local population on the flow
GFL$BO_elder_prop <- (GFL$BO_elders/GFL$BO_night_coun)*100
GFL$GP_elder_prop <- (GFL$GP_elders/GFL$GP_pop_tot)*100
GFL$BO_eth_prop <- (GFL$BO_ethnics/GFL$BO_night_coun)*100
GFL$GP_eth_prop <- (GFL$GP_ethnics/GFL$GP_pop_tot)*100
GFL$BO_car_prop <- (GFL$BO_no_car/GFL$BO_night_coun)*100
GFL$GP_car_prop <- (GFL$GP_no_car/GFL$GP_pop_tot)*100

# create distance to city centre
# this will be used in investigation of spatial autocorrelation, inclusion of random effect of spatil distribution in a model
GFL$dist_centre <- spDistsN1(GFL, centre, longlat = TRUE)
```

# Modelling time
## All flows
### unconstrained

```{r message=FALSE, warning=FALSE}
# set ordeof the flows
# this is one of the most iportant steps, th SIM technique has a comparative character and so all the OD flows are compared to the first one executed, which is the first line in a table
# here we assume that the best flow is the flow with the most Items on a flow, and so al the others are compared to this one
GFL <- GFL[order(GFL$Items, decreasing = T),]

# notice that the highest flow between Liverpool Whiston Boots and Aston healthcare practice has 109,227 prescription flow a year, however has distance lenght 2.27 km
GFL@data["2961",]

```

```{r message=FALSE, warning=FALSE}
# 1 - Unconstrained model of all flows
first <- glm(Items ~ log(GP_Items_PY) + log(BO_I_PY) + distance, na.action = na.exclude, family = poisson(link = "log"), data = GFL)
summary(first)
```


```{r message=FALSE, warning=FALSE}
# 2 - Unconstrained model with covariates for all flows
# running the model with all the catchment variables
second_before <- glm(Items ~ log(GP_Items_PY) + log(BO_I_PY) + distance + dist_centre + GP_Flag +  GP_Partners + BO_eth_prop + GP_elder_prop + GP_MEAN_imd_score + GP_eth_prop + GP_car_prop + BO_attr + BO_py_boots_comp + GP_pop_tot + BO_NHS_Desc + BO_Format  + BO_py_competitors + BO_day_pop + BO_elder_prop + BO_MEAN_imd_s + BO_car_prop + BO_night_coun
, na.action = na.exclude, family = poisson(link = "log"), data = GFL)

# excluding the variables with high VIF; higly biased variables that does not have a significant effect on interaction
second <- glm(Items ~ log(GP_Items_PY) + log(BO_I_PY) + distance + dist_centre + GP_Flag +  GP_Partners + GP_pop_tot + GP_eth_prop + BO_day_pop + BO_Format + BO_py_boots_comp + BO_NHS_Desc + BO_py_competitors, na.action = na.exclude, family = poisson(link = "log"), data = GFL)
summary(second)
```

```{r message=FALSE, warning=FALSE}
# investigation of the residuals distribution - fitted vs actual 
spreadLevelPlot(second_before)
spreadLevelPlot(second)
```


### production constrained

```{r message=FALSE, warning=FALSE}
 # 3 - Production constrained model for all flows
third <- glm(Items ~ GP_ODS + log(BO_I_PY) +  distance, na.action = na.exclude, family = poisson(link = "log"), data = GFL)

summary(third)
```

### attraction constrained

```{r message=FALSE, warning=FALSE}
# 4 - Attraction constrained model for all flows
fourth <- glm(Items ~ Ph_ODS +log(GP_Items_PY)  +  distance  
                , na.action = na.exclude, family = poisson(link = "log"), data = GFL)
summary(fourth)
```

### doubly constrained

```{r message=FALSE, warning=FALSE}
# increase number of rows printed by R studio
options(max.print=999999)
```

```{r message=FALSE, warning=FALSE}
# 5 - Doubly constrained model for all flows
fifth <- glm(Items ~  GP_ODS + Ph_ODS + distance 
              , na.action = na.exclude, family = poisson(link = "log"), data = GFL)
summary(fifth)
```

### random effect

```{r message=FALSE, warning=FALSE}
# 6 - Random effect included in unconstrained model for all flows - mixed effect model
random <- glmer(Items ~ GP_ODS + log(BO_I_PY) +  distance + (1|dist_centre) ,  family = poisson(link = "log"), data = GFL@data)
```

### try matrix
```{r message=FALSE, warning=FALSE}
GFL$fourthFitted <- round(fitted(fourth),0)
mat6 <- dcast(GFL@data, GP_ODS ~ Ph_ODS, sum, value.var = "fourthFitted", margins=c("GP_ODS", "Ph_ODS"))
mat6
```

```{r message=FALSE, warning=FALSE}
cdatasubmat6 <- dcast(GFL@data, GP_ODS ~ Ph_ODS, sum, value.var = "Items", margins=c("GP_ODS", "Ph_ODS"))
cdatasubmat6
```

```{r message=FALSE, warning=FALSE}
brk1 = classIntervals(GFL$Items, n = 5, style = "kmeans")
brk2 = classIntervals(GFL$fourthFitted, n = 5, style = "kmeans")

grid.arrange(
  spplot(GFL, "Items", col = "transparent", sp.layout = mers.back ,
       main = list(label=" "), col.regions = my, 
    at = brk1$brks, par.settings = list(axis.line = list(col = 'transparent'))), 
  
  spplot(GFL, "fourthFitted", col = "transparent", sp.layout = mers.back ,
       main = list(label="Predicted items"), col.regions = my, 
    at = brk2$brks, par.settings = list(axis.line = list(col = 'transparent'))),ncol=2)

```


### validation 

```{r message=FALSE, warning=FALSE}
# create table with R2 of each model
R2logit<- function(y,model){
    R2<- 1-(model$deviance/model$null.deviance)
    return(R2)
}

r2s <- data.frame(model=c( 'first', 'second', 'third','fourth', 'fifth'),
                      R2_logit=c(
                              R2logit(Items, first),
                              R2logit(Items, second),
                             R2logit(Items, third),
                             R2logit(Items, fourth),
                             R2logit(Items, fifth)))
r2s


# create table with AIC of each model
AIC(first, second, third, fourth, fifth)

# create table with RMSE for each model
rmses <- data.frame(model=c( 'first', 'second', 'third','fourth', 'fifth'),
                      RMSE=c(
                              rmse(GFL$Items, first$fitted.values),
                              rmse(GFL$Items, second$fitted.values),
                             rmse(GFL$Items, third$fitted.values),
                             rmse(GFL$Items, fourth$fitted.values),
                             rmse(GFL$Items, fifth$fitted.values)
                            
                           )
                      )
rmses
```

### predictive check

```{r message=FALSE, warning=FALSE}
# create a function that generate actual distribution and posterior distribution along with sample distributions, to check the prediction uncertainty
# copyright @darribas

generate_draw_poi <- function(m){
  # Set up predictors matrix
  x <- model.matrix(m)
  # Obtain draws of parameters (inferential uncertainty)
  sim_bs <- sim(m, 1)
  # Predicted value
  xb <- x %*% sim_bs@coef[1, ]
  #xb <- x %*% m$coefficients
  # Transform using the link function
  mu <- exp(xb)
  # Obtain a random realization
  y_hat <- rpois(n=length(mu), lambda=mu)
  return(y_hat)
}
```

```{r message=FALSE, warning=FALSE}
# Call plots with density lines and directky export them
# predictive check for model 1 - unconstrained for all flows
png(filename="E:/Dissertation/graphs/all flows/PP_first.png", width = 800, height = 500, units = "px")
plot(density(first$fitted.values), 
     xlim=c(-100, 5000),
     ylim=c(0, max(c(
                  max(density(first$fitted.values)$y), 
                  max(density(GFL$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(first)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(first$fitted.values), 
      col='black',
      main='')
lines(density(GFL$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Set 1: All flows - Simple unconstrained")
dev.off()

# predictive check for model 2 - unconstrained with covariates for all flows
png(filename="E:/Dissertation/graphs/all flows/PP_second.png", width = 800, height = 500, units = "px")
plot(density(second$fitted.values), 
     xlim=c(-100, 5000),
     ylim=c(0, max(c(
                  max(density(second$fitted.values)$y), 
                  max(density(GFL$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(second)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(second$fitted.values), 
      col='black',
      main='')
lines(density(GFL$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Set 1: All flows - Unconstrained with covariates")
dev.off()

# predictive check for model 3 - production constrained for all flows
png(filename="E:/Dissertation/graphs/all flows/PP_third.png", width = 800, height = 500, units = "px")
plot(density(third$fitted.values), 
     xlim=c(-100, 5000),
     ylim=c(0, max(c(
                  max(density(third$fitted.values)$y), 
                  max(density(GFL$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(third)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(third$fitted.values), 
      col='black',
      main='')
lines(density(GFL$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Set 1: All flows - Production constrained")
dev.off()

# predictive check for model 4 - attraction constrained for all flows
png(filename="E:/Dissertation/graphs/all flows/PP_fourth.png", width = 800, height = 500, units = "px")
plot(density(fourth$fitted.values), 
     xlim=c(-100, 5000),
     ylim=c(0, max(c(
                  max(density(fourth$fitted.values)$y), 
                  max(density(GFL$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(fourth)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(fourth$fitted.values), 
      col='black',
      main='')
lines(density(GFL$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Set 1: All flows - Attraction constrained")
dev.off()

# predictive check for model 5 - doubly constrained for all flows
png(filename="E:/Dissertation/graphs/all flows/PP_fifth.png", width = 800, height = 500, units = "px")
plot(density(fifth$fitted.values), 
     xlim=c(-100, 5000),
     ylim=c(0, max(c(
                  max(density(fifth$fitted.values)$y), 
                  max(density(GFL$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(fifth)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(fifth$fitted.values), 
      col='black',
      main='')
lines(density(GFL$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Set 1: All flows - Doubly constrained")
dev.off()

```
 
### variability

```{r message=FALSE, warning=FALSE}
# create plots with model examination - cooks distance, residuals distribution, outliers, etc.
# direct export to a file

# first
png(filename="E:/Dissertation/graphs/all flows/first.png", width = 800, height = 500, units = "px")
print(
par(mfrow=c(2,2)),
plot(first)
)
dev.off()

# second
png(filename="E:/Dissertation/graphs/all flows/second.png", width = 800, height = 500, units = "px")
print(
par(mfrow=c(2,2)),
plot(second)
)
dev.off()

# third
png(filename="E:/Dissertation/graphs/all flows/third.png", width = 800, height = 500, units = "px")
print(
par(mfrow=c(2,2)),
plot(third)
)
dev.off()

# fourth
png(filename="E:/Dissertation/graphs/all flows/fourth.png", width = 800, height = 500, units = "px")
print(
par(mfrow=c(2,2)),
plot(fourth)
)
dev.off()

# fifth
png(filename="E:/Dissertation/graphs/all flows/fifth.png", width = 800, height = 500, units = "px")
print(
par(mfrow=c(2,2)),
plot(fifth)
)
dev.off()

```

## Modelling the highest flows

```{r message=FALSE, warning=FALSE}
# select just the first 500 rows of the flow data
GFH <- GFL[1:500, ]
```


```{r message=FALSE, warning=FALSE}
# run the models

# 7 - Unconstrained model
selfirst <- glm(Items ~ log(GP_Items_PY) + log(BO_I_PY) + distance , na.action = na.exclude, family = poisson(link = "log"), data = GFH)

# 8 - Unconstrained model with covariates
selsecond <- glm(Items ~ log(GP_Items_PY) + log(BO_I_PY) + distance + dist_centre + GP_Flag +  GP_Partners + GP_pop_tot + GP_eth_prop + BO_day_pop + BO_Format + BO_py_boots_comp + BO_NHS_Desc + BO_py_competitors , na.action = na.exclude, family = poisson(link = "log"), data = GFH)

# 9 - Production constrained model 
selthird <- glm(Items ~ GP_ODS  + log(BO_I_PY) +  distance
               , na.action = na.exclude, family = poisson(link = "log"), data = GFH)

# 10 - Attraction constrained model
selfourth <- glm(Items ~ Ph_ODS +log(GP_Items_PY)  +  distance  
                , na.action = na.exclude, family = poisson(link = "log"), data = GFH)

# 11 - Doubly constrained model
selfifth <- glm(Items ~  GP_ODS + Ph_ODS + distance 
              , na.action = na.exclude, family = poisson(link = "log"), data = GFH)

# 12 - Mixed effect model
selrandom <- glmer(Items ~ GP_ODS + log(BO_I_PY) +  distance + (1|dist_centre) ,  family = poisson(link = "log"), data = GFH@data)
```

```{r message=FALSE, warning=FALSE}
# R2, AIC, RMSE
r2s <- data.frame(model=c( 'selfirst', 'selsecond', 'selthird','selfourth', 'selfifth'),
                      R2_logit=c(
                              R2logit(Items, selfirst),
                              R2logit(Items, selsecond),
                             R2logit(Items, selthird),
                             R2logit(Items, selfourth),
                             R2logit(Items, selfifth)))
r2s
AIC(selfirst, selsecond, selthird, selfourth, selfifth, selrandom, seldourandom)

rmses <- data.frame(model=c( 'selfirst', 'selsecond', 'selthird','selfourth', 'selfifth'),
                      RMSE=c(
                              rmse(GFH$Items, selfirst$fitted.values),
                              rmse(GFH$Items, selsecond$fitted.values),
                             rmse(GFH$Items, selthird$fitted.values),
                             rmse(GFH$Items, selfourth$fitted.values),
                             rmse(GFH$Items, selfifth$fitted.values)
                            
                           )
                      )
rmses
```

```{r message=FALSE, warning=FALSE}
# Model diagnostics

# 7 - Unconstrained model
png(filename="E:/Dissertation/graphs/500 highest/selfirst.png", width = 800, height = 500, units = "px")
print(
par(mfrow=c(2,2)),
plot(selfirst)
)
dev.off()

# 8 - Unconstrained model with covariates
png(filename="E:/Dissertation/graphs/500 highest/selsecond.png", width = 800, height = 500, units = "px")
print(
par(mfrow=c(2,2)),
plot(selsecond)
)
dev.off()

# 9 - Production constrained model 
png(filename="E:/Dissertation/graphs/500 highest/selthird.png", width = 800, height = 500, units = "px")
print(
par(mfrow=c(2,2)),
plot(selthird)
)
dev.off()

# 10 - Attraction constrained model
png(filename="E:/Dissertation/graphs/500 highest/selfourth.png", width = 800, height = 500, units = "px")
print(
par(mfrow=c(2,2)),
plot(selfourth)
)
dev.off()

# 11 - Doubly constrained model
png(filename="E:/Dissertation/graphs/500 highest/selfifth.png", width = 800, height = 500, units = "px")
print(
par(mfrow=c(2,2)),
plot(selfifth)
)
dev.off()
```

```{r message=FALSE, warning=FALSE}
# predictive check

# 7 - Unconstrained model
png(filename="E:/Dissertation/graphs/500 highest/high_first.png", width = 800, height = 500, units = "px")
plot(density(selfirst$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(selfirst$fitted.values)$y), 
                  max(density(GFH$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(selfirst)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(selfirst$fitted.values), 
      col='black',
      main='')
lines(density(GFH$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Simple unconstrained - 500 highest flows")
dev.off()

# 8 - Unconstrained model with covariates
png(filename="E:/Dissertation/graphs/500 highest/high_second.png", width = 800, height = 500, units = "px")
plot(density(selsecond$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(selsecond$fitted.values)$y), 
                  max(density(GFH$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(selsecond)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(selsecond$fitted.values), 
      col='black',
      main='')
lines(density(GFH$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Unconstrained with covariates - 500 highest flows")
dev.off()

# 9 - Production constrained model 
png(filename="E:/Dissertation/graphs/500 highest/high_third.png", width = 800, height = 500, units = "px")
plot(density(selthird$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(selthird$fitted.values)$y), 
                  max(density(GFH$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(selthird)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(selthird$fitted.values), 
      col='black',
      main='')
lines(density(GFH$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Production constrained - 500 highest flows")
dev.off()

# 10 - Attraction constrained model
png(filename="E:/Dissertation/graphs/500 highest/high_fourth.png", width = 800, height = 500, units = "px")
plot(density(selfourth$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(selfourth$fitted.values)$y), 
                  max(density(GFH$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(selfourth)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(selfourth$fitted.values), 
      col='black',
      main='')
lines(density(GFH$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Attraction constrained - 500 highest flows")
dev.off()

# 11 - Doubly constrained model
png(filename="E:/Dissertation/graphs/500 highest/high_fifth.png", width = 800, height = 500, units = "px")
plot(density(selfifth$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(selfifth$fitted.values)$y), 
                  max(density(GFH$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(selfifth)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
#
lines(density(selfifth$fitted.values), 
      col='black',
      main='')
lines(density(GFH$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Doubly constrained - 500 highest flows")
dev.off()

```

## Modelling interegional flows

```{r message=FALSE, warning=FALSE}
# selecting just the flows within distance of 800 metres
GFI <- GFL[which(GFL$distance < 800), ]
```


```{r message=FALSE, warning=FALSE}
# modelling interregional flows
# 13 - Unconstrained model
intfirst <- glm(Items ~ log(GP_Items_PY) + log(BO_I_PY) + distance , na.action = na.exclude, family = poisson(link = "log"), data = GFI)

# 14 - Unconstrained model with covariates
intsecond <- glm(Items ~ log(GP_Items_PY) + log(BO_I_PY) + distance + dist_centre + GP_Flag +  GP_Partners + GP_pop_tot + GP_eth_prop + BO_day_pop + BO_Format + BO_py_boots_comp + BO_NHS_Desc + BO_py_competitors , na.action = na.exclude, family = poisson(link = "log"), data = GFI)

# 15 - Production constrained model 
intthird <- glm(Items ~ GP_ODS  + log(BO_I_PY) +  distance 
               , na.action = na.exclude, family = poisson(link = "log"), data = GFI)

# 16 - Attraction constrained model
intfourth <- glm(Items ~ Ph_ODS +log(GP_Items_PY)  +  distance  
                , na.action = na.exclude, family = poisson(link = "log"), data = GFI)

# 17 - Doubly constrained model
intfifth <- glm(Items ~  GP_ODS + Ph_ODS + distance 
              , na.action = na.exclude, family = poisson(link = "log"), data = GFI)

# 18 - Mixed effect model
intrandom <- glmer(Items ~ GP_ODS + log(BO_I_PY) +  distance + (1|dist_centre) ,  family = poisson(link = "log"), data = GFI@data)
```

```{r message=FALSE, warning=FALSE}
# R2, AIC, RMSE
r2s <- data.frame(model=c( 'intfirst', 'intsecond', 'intthird','intfourth', 'intfifth'),
                      R2_logit=c(
                              R2logit(Items, intfirst),
                              R2logit(Items, intsecond),
                             R2logit(Items, intthird),
                             R2logit(Items, intfourth),
                             R2logit(Items, intfifth)))
r2s

AIC(intfirst, intsecond, intthird, intfourth, intfifth, intrandom, intdourandom)

rmses <- data.frame(model=c( 'intfirst', 'intsecond', 'intthird','intfourth', 'intfifth'),
                      RMSE=c(
                              rmse(GFI$Items, intfirst$fitted.values),
                              rmse(GFI$Items, intsecond$fitted.values),
                             rmse(GFI$Items, intthird$fitted.values),
                             rmse(GFI$Items, intfourth$fitted.values),
                             rmse(GFI$Items, intfifth$fitted.values)
                            
                           )
                      )
rmses
```

```{r message=FALSE, warning=FALSE}
# model diagnostics
# 13 - Unconstrained model
png(filename="E:/Dissertation/graphs/catchment/intfirst.png", width = 800, height = 500, units = "px")
print(
par(mfrow=c(2,2)),
plot(intfirst)
)
dev.off()

# 14 - Unconstrained model with covariates
png(filename="E:/Dissertation/graphs/catchment/intsecond.png", width = 800, height = 500, units = "px")
print(
par(mfrow=c(2,2)),
plot(intsecond)
)
dev.off()

# 15 - Production constrained model 
png(filename="E:/Dissertation/graphs/catchment/intthird.png", width = 800, height = 500, units = "px")
print(
par(mfrow=c(2,2)),
plot(intthird)
)
dev.off()

# 16 - Attraction constrained model
png(filename="E:/Dissertation/graphs/catchment/intfourth.png", width = 800, height = 500, units = "px")
print(
par(mfrow=c(2,2)),
plot(intfourth)
)
dev.off()

# 17 - Doubly constrained model
png(filename="E:/Dissertation/graphs/catchment/intfifth.png", width = 800, height = 500, units = "px")
print(
par(mfrow=c(2,2)),
plot(intfifth)
)
dev.off()
```

```{r message=FALSE, warning=FALSE}
# Predictive check
# 13 - Unconstrained model
png(filename="E:/Dissertation/graphs/catchment/inter_first.png", width = 800, height = 500, units = "px")
plot(density(intfirst$fitted.values), 
     xlim=c(-100, 100000),
     ylim=c(0, max(c(
                  max(density(intfirst$fitted.values)$y), 
                  max(density(GFI$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(intfirst)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(intfirst$fitted.values), 
      col='black',
      main='')
lines(density(GFI$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Simple unconstrained - Interregional flows (800m)")
dev.off()

# 14 - Unconstrained model with covariates
png(filename="E:/Dissertation/graphs/catchment/inter_second.png", width = 800, height = 500, units = "px")
plot(density(intsecond$fitted.values), 
     xlim=c(-100, 100000),
     ylim=c(0, max(c(
                  max(density(intsecond$fitted.values)$y), 
                  max(density(GFI$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(intsecond)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
#
lines(density(intsecond$fitted.values), 
      col='black',
      main='')
lines(density(GFI$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Unconstrained with covariates - Interregional flows (800m)")
dev.off()

# 15 - Production constrained model 
png(filename="E:/Dissertation/graphs/catchment/inter_third.png", width = 800, height = 500, units = "px")
plot(density(intthird$fitted.values), 
     xlim=c(-100, 100000),
     ylim=c(0, max(c(
                  max(density(intthird$fitted.values)$y), 
                  max(density(GFI$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(intthird)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(intthird$fitted.values), 
      col='black',
      main='')
lines(density(GFI$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Production constrained - Interregional flows (800m)")
dev.off()

# 16 - Attraction constrained model
png(filename="E:/Dissertation/graphs/catchment/inter_fourth.png", width = 800, height = 500, units = "px")
plot(density(intfourth$fitted.values), 
     xlim=c(-100, 100000),
     ylim=c(0, max(c(
                  max(density(intfourth$fitted.values)$y), 
                  max(density(GFI$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(intfourth)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(intfourth$fitted.values), 
      col='black',
      main='')
lines(density(GFI$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Attraction constrained - Interregional flows (800m)")
dev.off()

# 17 - Doubly constrained model
png(filename="E:/Dissertation/graphs/catchment/inter_fifth.png", width = 800, height = 500, units = "px")
plot(density(intfifth$fitted.values), 
     xlim=c(-100, 100000),
     ylim=c(0, max(c(
                  max(density(intfifth$fitted.values)$y), 
                  max(density(GFI$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(intfifth)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(intfifth$fitted.values), 
      col='black',
      main='')
lines(density(GFI$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Doubly constrained - Interregional flows (800m)")
dev.off()

```




## Modelling flows above 100 items per year
```{r message=FALSE, warning=FALSE}
# Selecting rows withmore then 100 items
GFM <- GFL[which(GFL$Items > 100), ]
```

```{r message=FALSE, warning=FALSE}
# defining models
# 19 - Unconstrained model
minfirst <- glm(Items ~ log(GP_Items_PY) + log(BO_I_PY) + distance , na.action = na.exclude, family = poisson(link = "log"), data = GFM)

# 20 - Unconstrained model with covariates
minsecond <- glm(Items ~ log(GP_Items_PY) + log(BO_I_PY) + distance + dist_centre + GP_Flag +  GP_Partners + GP_pop_tot + GP_eth_prop + BO_day_pop + BO_Format + BO_py_boots_comp + BO_NHS_Desc + BO_py_competitors , na.action = na.exclude, family = poisson(link = "log"), data = GFM)

# 21 - Production constrained model 
minthird <- glm(Items ~ GP_ODS  + log(BO_I_PY) +  distance 
               , na.action = na.exclude, family = poisson(link = "log"), data = GFM)

# 22 - Attraction constrained model
minfourth <- glm(Items ~ Ph_ODS +log(GP_Items_PY)  +  distance  
                , na.action = na.exclude, family = poisson(link = "log"), data = GFM)

# 23 - Doubly constrained model
minfifth <- glm(Items ~  GP_ODS + Ph_ODS + distance 
              , na.action = na.exclude, family = poisson(link = "log"), data = GFM)

# 24 - Mixed effect model
minrandom <- glmer(Items ~ GP_ODS + log(BO_I_PY) +  distance + (1|dist_centre) ,  family = poisson(link = "log"), data = GFM@data)
summary(minfifth)
```

```{r message=FALSE, warning=FALSE}
# R2, AIC, RMSE
r2s <- data.frame(model=c( 'minfirst', 'minsecond', 'minthird','minfourth', 'minfifth'),
                      R2_logit=c(
                              R2logit(Items, minfirst),
                              R2logit(Items, minsecond),
                             R2logit(Items, minthird),
                             R2logit(Items, minfourth),
                             R2logit(Items, minfifth)))
r2s

AIC(minfirst, minsecond, minthird, minfourth, minfifth)

rmses <- data.frame(model=c( 'minfirst', 'minsecond', 'minthird','minfourth', 'minfifth'),
                      RMSE=c(
                              rmse(GFM$Items, minfirst$fitted.values),
                              rmse(GFM$Items, minsecond$fitted.values),
                             rmse(GFM$Items, minthird$fitted.values),
                             rmse(GFM$Items, minfourth$fitted.values),
                             rmse(GFM$Items, minfifth$fitted.values)
                            
                           )
                      )
rmses
```

```{r message=FALSE, warning=FALSE}
# model diagnostics
# 19 - Unconstrained model
png(filename="E:/Dissertation/graphs/without 100/minfirst.png", width = 800, height = 500, units = "px")
print(
par(mfrow=c(2,2)),
plot(minfirst)
)
dev.off()

# 20 - Unconstrained model with covariates
png(filename="E:/Dissertation/graphs/without 100/minsecond.png", width = 800, height = 500, units = "px")
print(
par(mfrow=c(2,2)),
plot(minsecond)
)
dev.off()


# 21 - Production constrained model 
png(filename="E:/Dissertation/graphs/without 100/minthird.png", width = 800, height = 500, units = "px")
print(
par(mfrow=c(2,2)),
plot(minthird)
)
dev.off()

# 22 - Attraction constrained model
png(filename="E:/Dissertation/graphs/without 100/minfourth.png", width = 800, height = 500, units = "px")
print(
par(mfrow=c(2,2)),
plot(minfourth)
)
dev.off()

# 23 - Doubly constrained model
png(filename="E:/Dissertation/graphs/without 100/minfifth.png", width = 800, height = 500, units = "px")
print(
par(mfrow=c(2,2)),
plot(minfifth)
)
dev.off()
```

```{r message=FALSE, warning=FALSE}
# Predictive plot
# 19 - Unconstrained model
png(filename="E:/Dissertation/graphs/without 100/no100_first.png", width = 800, height = 500, units = "px")
plot(density(minfirst$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(minfirst$fitted.values)$y), 
                  max(density(GFM$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(minfirst)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(minfirst$fitted.values), 
      col='black',
      main='')
lines(density(GFM$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Simple unconstrained - without flows below 100")
dev.off()

# 20 - Unconstrained model with covariates
png(filename="E:/Dissertation/graphs/without 100/no100_second.png", width = 800, height = 500, units = "px")
plot(density(minsecond$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(minsecond$fitted.values)$y), 
                  max(density(GFM$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(minsecond)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(minsecond$fitted.values), 
      col='black',
      main='')
lines(density(GFM$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Unconstrained with covariates - without flows below 100")
dev.off()

# 21 - Production constrained model 
png(filename="E:/Dissertation/graphs/without 100/no100_third.png", width = 800, height = 500, units = "px")
plot(density(minthird$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(minthird$fitted.values)$y), 
                  max(density(GFM$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(minthird)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(minthird$fitted.values), 
      col='black',
      main='')
lines(density(GFM$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Production constrained - without flows below 100")
dev.off()

# 22 - Attraction constrained model
png(filename="E:/Dissertation/graphs/without 100/no100_fourth.png", width = 800, height = 500, units = "px")
plot(density(minfourth$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(minfourth$fitted.values)$y), 
                  max(density(GFM$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(minfourth)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(minfourth$fitted.values), 
      col='black',
      main='')
lines(density(GFM$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Attraction constrained - without flows below 100")
dev.off()

# 23 - Doubly constrained model
png(filename="E:/Dissertation/graphs/without 100/no100_fifth.png", width = 800, height = 500, units = "px")
plot(density(minfifth$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(minfifth$fitted.values)$y), 
                  max(density(GFM$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(minfifth)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(minfifth$fitted.values), 
      col='black',
      main='')
lines(density(GFM$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Doubly constrained - without flows below 100")
dev.off(
```

## Modelling flows above the mean Item from  all flows

```{r message=FALSE, warning=FALSE}
# generate mean flow
Meanflow <- mean(flow$Items)
# selest flows above 771 Items
GFX <- GFL[which(GFL$Items > Meanflow), ]
```

```{r message=FALSE, warning=FALSE}
# defining models
# 25 - Unconstrained model
maxfirst <- glm(Items ~ log(GP_Items_PY) + log(BO_I_PY) + distance , na.action = na.exclude, family = poisson(link = "log"), data = GFX)

# 26 - Unconstrained model with covariates
maxsecond <- glm(Items ~ log(GP_Items_PY) + log(BO_I_PY) + distance + dist_centre + GP_Flag +  GP_Partners + GP_pop_tot + GP_eth_prop + BO_day_pop + BO_Format + BO_py_boots_comp + BO_NHS_Desc + BO_py_competitors , na.action = na.exclude, family = poisson(link = "log"), data = GFX)

# 27 - Production constrained model 
maxthird <- glm(Items ~ GP_ODS  + log(BO_I_PY) +  distance 
               , na.action = na.exclude, family = poisson(link = "log"), data = GFX)

# 28 - Attraction constrained model
maxfourth <- glm(Items ~ Ph_ODS +log(GP_Items_PY)  +  distance  
                , na.action = na.exclude, family = poisson(link = "log"), data = GFX)

# 29 - Doubly constrained model
maxfifth <- glm(Items ~  GP_ODS + Ph_ODS + distance 
              , na.action = na.exclude, family = poisson(link = "log"), data = GFX)

# 30 - Mixed effect model
maxrandom <- glmer(Items ~ GP_ODS + log(BO_I_PY) +  distance + (1|dist_centre) ,  family = poisson(link = "log"), data = GFX@data)
```

```{r message=FALSE, warning=FALSE}
# R2, AIc, RMSE
r2s <- data.frame(model=c( 'maxfirst', 'maxsecond', 'maxthird','maxfourth', 'maxfifth'),
                      R2_logit=c(
                              R2logit(Items, maxfirst),
                              R2logit(Items, maxsecond),
                             R2logit(Items, maxthird),
                             R2logit(Items, maxfourth),
                             R2logit(Items, maxfifth)))
r2s

AIC(maxfirst, maxsecond, maxthird, maxfourth, maxfifth)

rmses <- data.frame(model=c( 'maxfirst', 'maxsecond', 'maxthird','maxfourth', 'maxfifth'),
                      RMSE=c(
                              rmse(GFX$Items, maxfirst$fitted.values),
                              rmse(GFX$Items, maxsecond$fitted.values),
                             rmse(GFX$Items, maxthird$fitted.values),
                             rmse(GFX$Items, maxfourth$fitted.values),
                             rmse(GFX$Items, maxfifth$fitted.values)
                            
                           )
                      )
rmses
```

```{r message=FALSE, warning=FALSE}
# model diagnostics
# 25 - Unconstrained model
png(filename="E:/Dissertation/graphs/from max/maxfirst.png", width = 800, height = 500, units = "px")
print(
par(mfrow=c(2,2)),
plot(maxfirst)
)
dev.off()

# 26 - Unconstrained model with covariates
png(filename="E:/Dissertation/graphs/from max/maxsecond.png", width = 800, height = 500, units = "px")
print(
par(mfrow=c(2,2)),
plot(maxsecond)
)
dev.off()

# 27 - Production constrained model 
png(filename="E:/Dissertation/graphs/from max/maxthird.png", width = 800, height = 500, units = "px")
print(
par(mfrow=c(2,2)),
plot(maxthird)
)
dev.off()

# 28 - Attraction constrained model
png(filename="E:/Dissertation/graphs/from max/maxfourth.png", width = 800, height = 500, units = "px")
print(
par(mfrow=c(2,2)),
plot(maxfourth)
)
dev.off()

# 29 - Doubly constrained model
png(filename="E:/Dissertation/graphs/from max/maxfifth.png", width = 800, height = 500, units = "px")
print(
par(mfrow=c(2,2)),
plot(maxfifth)
)
dev.off()
```

```{r message=FALSE, warning=FALSE}
# predictive check
# 25 - Unconstrained model
png(filename="E:/Dissertation/graphs/from max/max_first.png", width = 800, height = 500, units = "px")
plot(density(maxfirst$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(maxfirst$fitted.values)$y), 
                  max(density(GFX$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(maxfirst)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(maxfirst$fitted.values), 
      col='black',
      main='')
lines(density(GFX$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Simple unconstrained - without flows below the mean (771)")
dev.off()

# 26 - Unconstrained model with covariates
png(filename="E:/Dissertation/graphs/from max/max_second.png", width = 800, height = 500, units = "px")
plot(density(maxsecond$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(maxsecond$fitted.values)$y), 
                  max(density(GFX$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(maxsecond)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(maxsecond$fitted.values), 
      col='black',
      main='')
lines(density(GFX$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Unconstrained with covariates - without flows below the mean (771)")
dev.off()

# 27 - Production constrained model 
png(filename="E:/Dissertation/graphs/from max/max_third.png", width = 800, height = 500, units = "px")
plot(density(maxthird$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(maxthird$fitted.values)$y), 
                  max(density(GFX$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(maxthird)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(maxthird$fitted.values), 
      col='black',
      main='')
lines(density(GFX$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Production constrained - without flows below the mean (771)")
dev.off()

# 28 - Attraction constrained model
png(filename="E:/Dissertation/graphs/from max/max_fourth.png", width = 800, height = 500, units = "px")
plot(density(maxfourth$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(maxfourth$fitted.values)$y), 
                  max(density(GFX$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(maxfourth)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(maxfourth$fitted.values), 
      col='black',
      main='')
lines(density(GFX$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Attraction constrained - without flows below the mean (771)")
dev.off()

# 29 - Doubly constrained model
png(filename="E:/Dissertation/graphs/from max/max_fifth.png", width = 800, height = 500, units = "px")
plot(density(maxfifth$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(maxfifth$fitted.values)$y), 
                  max(density(GFX$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(maxfifth)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(maxfifth$fitted.values), 
      col='black',
      main='')
lines(density(GFX$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Doubly constrained - without flows below the mean (771)")
dev.off()
```

## Modelling flows within walking distance 1600m

```{r message=FALSE, warning=FALSE}
# Defining flows within 1600 distance
GFW <- GFL[which(GFL$distance < 1600), ]
```

```{r message=FALSE, warning=FALSE}
# defining models
# 31 - Unconstrained model
walkfirst <- glm(Items ~ log(GP_Items_PY) + log(BO_I_PY) + distance , na.action = na.exclude, family = poisson(link = "log"), data = GFW)

# 32 - Unconstrained model with covariates
walksecond <- glm(Items ~ log(GP_Items_PY) + log(BO_I_PY) + distance + dist_centre + GP_Flag +  GP_Partners + GP_pop_tot + GP_eth_prop + BO_day_pop + BO_Format + BO_py_boots_comp + BO_NHS_Desc + BO_py_competitors , na.action = na.exclude, family = poisson(link = "log"), data = GFW)

# 33 - Production constrained model 
walkthird <- glm(Items ~ GP_ODS  + log(BO_I_PY) +  distance  , na.action = na.exclude, family = poisson(link = "log"), data = GFW)

# 34 - Attraction constrained model
walkfourth <- glm(Items ~ Ph_ODS +log(GP_Items_PY)  +  distance , na.action = na.exclude, family = poisson(link = "log"), data = GFW)

# 35 - Doubly constrained model
walkfifth <- glm(Items ~  GP_ODS + Ph_ODS + distance, na.action = na.exclude, family = poisson(link = "log"), data = GFW)
```

```{r message=FALSE, warning=FALSE}
# R2, AIC, RMSE
r2s <- data.frame(model=c( 'walkfirst', 'walksecond', 'walkthird','walkfourth', 'walkfifth'),
                      R2_logit=c(
                              R2logit(Items, walkfirst),
                              R2logit(Items, walksecond),
                             R2logit(Items, walkthird),
                             R2logit(Items, walkfourth),
                             R2logit(Items, walkfifth)))
r2s

AIC(walkfirst, walksecond, walkthird, walkfourth, walkfifth)

rmses <- data.frame(model=c( 'walkfirst', 'walksecond', 'walkthird','walkfourth', 'walkfifth'),
                      RMSE=c(
                              rmse(GFW$Items, walkfirst$fitted.values),
                              rmse(GFW$Items, walksecond$fitted.values),
                             rmse(GFW$Items, walkthird$fitted.values),
                             rmse(GFW$Items, walkfourth$fitted.values),
                             rmse(GFW$Items, walkfifth$fitted.values)
                            
                           )
                      )
rmses
```

```{r message=FALSE, warning=FALSE}
# model diagnostics
# 31 - Unconstrained model
png(filename="E:/Dissertation/graphs/from walk/walkfirst.png", width = 800, height = 500, units = "px")
print(
par(mfrow=c(2,2)),
plot(walkfirst)
)
dev.off()

# 32 - Unconstrained model with covariates
png(filename="E:/Dissertation/graphs/from walk/walksecond.png", width = 800, height = 500, units = "px")
print(
par(mfrow=c(2,2)),
plot(walksecond)
)
dev.off()

# 33 - Production constrained model 
png(filename="E:/Dissertation/graphs/from walk/walkthird.png", width = 800, height = 500, units = "px")
print(
par(mfrow=c(2,2)),
plot(walkthird)
)
dev.off()

# 34 - Attraction constrained model
png(filename="E:/Dissertation/graphs/from walk/walkfourth.png", width = 800, height = 500, units = "px")
print(
par(mfrow=c(2,2)),
plot(walkfourth)
)
dev.off()

# 35 - Doubly constrained model
png(filename="E:/Dissertation/graphs/from walk/walkfifth.png", width = 800, height = 500, units = "px")
print(
par(mfrow=c(2,2)),
plot(walkfifth)
)
dev.off()
```

```{r message=FALSE, warning=FALSE}
# predictive check
# 31 - Unconstrained model
png(filename="E:/Dissertation/graphs/from walk/walk_first.png", width = 800, height = 500, units = "px")
plot(density(walkfirst$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(walkfirst$fitted.values)$y), 
                  max(density(GFW$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(walkfirst)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(walkfirst$fitted.values), 
      col='black',
      main='')
lines(density(GFW$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Simple unconstrained - Interregional flows (1600m)")
dev.off()

# 32 - Unconstrained model with covariates
png(filename="E:/Dissertation/graphs/from walk/walk_second.png", width = 800, height = 500, units = "px")
plot(density(walksecond$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(walksecond$fitted.values)$y), 
                  max(density(GFW$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(walksecond)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(walksecond$fitted.values), 
      col='black',
      main='')
lines(density(GFW$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Unconstrained with covariates - Interregional flows (1600m)")
dev.off()

# 33 - Production constrained model 
png(filename="E:/Dissertation/graphs/from walk/walk_third.png", width = 800, height = 500, units = "px")
plot(density(walkthird$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(walkthird$fitted.values)$y), 
                  max(density(GFW$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(walkthird)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(walkthird$fitted.values), 
      col='black',
      main='')
lines(density(GFW$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Production constrained - Interregional flows (1600m)")
dev.off()

# 34 - Attraction constrained model
png(filename="E:/Dissertation/graphs/from walk/walk_fourth.png", width = 800, height = 500, units = "px")
plot(density(walkfourth$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(walkfourth$fitted.values)$y), 
                  max(density(GFW$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(walkfourth)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(walkfourth$fitted.values), 
      col='black',
      main='')
lines(density(GFW$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Attraction constrained - Interregional flows (1600m)")
dev.off()

# 35 - Doubly constrained model
png(filename="E:/Dissertation/graphs/from walk/walk_fifth.png", width = 800, height = 500, units = "px")
plot(density(walkfifth$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(walkfifth$fitted.values)$y), 
                  max(density(GFW$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(walkfifth)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(maxfifth$fitted.values), 
      col='black',
      main='')
lines(density(GFW$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Doubly constrained - Interregional flows (1600m)")
dev.off()
```
