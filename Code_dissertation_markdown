---
title: "Investigation of Prescription Flows between
General Practices and Boots Pharmacies via
Spatial Interaction Modeling Techniques"
author: "Lenka Hasova"
output: html_document
fig_caption: yes
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


```{r eval=FALSE, echo=FALSE, message=FALSE, warning=FALSE,results = 'hide'}
install.packages('downloader')
install.packages('stplanr')
install.packages('tidyr')
install.packages('spatialEco')
install.packages('Metrics')
```

```{r echo=FALSE, message=FALSE, warning=FALSE,results = 'hide'}
library(spatialEco)
library(sp)
library(MASS)
library(reshape2)
library(rgdal)
library(downloader)
library(maptools)
library(dplyr)
library(broom) 
library(ggplot2)
library(leaflet)
library(tidyr)
library(stringr)
library(spgwr)
library(RColorBrewer)
library(classInt)
library(gridExtra)
library(car)
library(arm)
library(spatstat)
library(grid)
library(ggmap)
library(lme4)
library(plyr)
library(stplanr)
library(SDraw)
library(Metrics)
```



## **This a documentation of R code used for the dissertation research project for Boots company. Complete markdown availiable as copy and paste at [github/hasovalenka/masters](https://github.com/hasovalenka/masters/blob/master/Code_dissertation_markdown) **

It consists of 2 sections

1. Data processing  
      + Loading data
      + Cleaning data
2. Modelling time
      + Modelling all the flows - full description in steps
      + Modeling other selections
      + Export the estimates from model
      + Final thoughts
      
**The models are coded in following order and names, therefore use ctr+f if you want to find a particular section**

```{r echo=FALSE, message=FALSE, warning=FALSE}
library(knitr)
library(kableExtra)
# help table
selection <- read.csv(file="E:/Dissertation/r/r_boots/code_to_git/selection.csv", header=TRUE,  stringsAsFactors = FALSE)

kable(selection) %>%
  kable_styling(bootstrap_options = c("striped", "hover"))
```

# Data processing

## Load the data and assighn projection

Here a note must be given to preprocessing through ArcGIS. Description of the crreated variables and methods used within ArcGIS is availiable as section 3.6.1 and Appendix of the [study](https://github.com/hasovalenka/masters/blob/master/CDRC%20Masters%20Dissertation%20Research%20Project.pdf)


```{r message=FALSE, warning=FALSE, error=FALSE, results='hide'}
# flows
flbo <- read.csv(file="E:/Dissertation/Boots stuff/full_pharmacy_to_surgery_items.csv", header=TRUE,  stringsAsFactors = FALSE)
# general practicioners
gps <- readOGR(dsn = "E:/Dissertation/written2", layer = "gps_points_covariates", stringsAsFactors = FALSE)
# boots phar
boots <- readOGR(dsn = "E:/Dissertation/written2", layer = "boots_points_covariates", stringsAsFactors = FALSE)
# merseyside boundary
mersey <- readOGR(dsn = "E:/Dissertation/geo", layer = "BOUND_MER", stringsAsFactors = FALSE)
# centre
centre <- readOGR(dsn= "E:/school back up/THG/green", layer = "Liverpool_Central") # Liverpool Central station

# define projection british national grid, units in metres
latlong = "+init=epsg:27700"

# aaply to all shapefiles
gps = spTransform(gps, CRS(latlong))
boots = spTransform(boots, CRS(latlong))
mersey = spTransform(mersey, CRS(latlong))
centre = spTransform(centre, CRS(latlong))
gps = spTransform(gps, CRS(latlong))
boots = spTransform(boots, CRS(latlong))

# correct names of pharmacies for fututre join andpersonal recognition
names(boots) <- c("BO_OBJECTID_1", "OBJECTID_2", "OBJECTID",   "BO_Store_No"  , "BO_ODS_Code" ,  "BO_Display_Na" ,"BO_Type",       "BO_Format" ,    "BO_NHS_Desc" ,  "BO_NEAR_FID" ,  "BO_distance_t", "BO_retail_are", "BO_attr"  ,     "OBJECTID_3" ,"Ph_ODS"  ,   "BO_Name" ,   "BO_HQ_Name"  ,  "BO_Addr"   , "BO_Strt",    "BO_PCNS"   , "BO_Items" ,   "BO_Type" ,   "BO_I_PY",    "BO_Chng" , "FID_"   ,    "OBJECTID_4", "ObjectID_5", "BO_FacilityID", "BO_n_competitors", "BO_py_competitors" ,    "BO_py_boots_comp"  ,   "BO_number_boo_comp"   , "BO_night_coun", "BO_day_pop",    "BO_elders",     "BO_ethnics"  , "BO_no_car"  ,   "BO_MEAN_imd_s", "BO_MEAN_incom" ,"BO_MEAN_emplo", "BO_MEAN_educa", "BO_MEAN_healt", "BO_MEAN_housi", "BO_MEAN_livin", "BO_MEAN_idaci" ,"BO_MEAN_idaop")

# cut the columns for neccesary (recomended to do before renaming)
A_boots <- boots[c(1,4:13,15:24,29:46)]

# same for the GP's
names(gps) <- c( "GP_OBJECTID",   "GP_ODS" ,    "GP_Name" ,   "GP_Street" , "GP_Address","GP_PCNS"  ,  "GP_Items"  , "GP_Flag" ,   "GP_Partners" ,  "Open_Date" , "Close_Date", "GP_Setting"   , "GP_Items_PY"  , "GP_Change" , "GP_pop_tot"  ,  "GP_elders"  ,   "GP_ethnics"   , "GP_no_car"   ,  "OBJECTID_1" ,"FacilityID" ,"GP_MEAN_imd_score", "GP_MEAN_incom", "GP_MEAN_emplo","GP_MEAN_educa", "GP_MEAN_healt", "GP_MEAN_housi", "GP_MEAN_livin", "GP_MEAN_idaci" ,"GP_MEAN_idaop", "Shape_Leng", "Shape_Area")
A_gps <- gps[c(1:9,12:18,21:29)]
```

Next section cleanse the data into a form that it is needed for the modelling.

1. The flows need to be aggregated from months into a year and outlined by just one full year 2017, this will allow us to combine the flows with the yearly counts of prescriptions prescribed and dispensed in a year, how we are able to extract from pharmacy and GP data. For any Spatial Interaction model it is necessary to have amount of 'units'(prescribtions) generated at origin, amount of prescribtion generated at destination and amount of prescribtions flowing between Origin and destination.

2. We assured that there are no excessive, missing or missmatched rows, the flows are restricted for Merseyside area and there are just flows that has the whole year (12 months of flows) of sustainable prescription movement.

3. The distance between each origin and destination needs to be calculated.

4. Generated covariates needs to be correctly interpreted and calculated.

```{r message=FALSE, warning=FALSE, error=FALSE}
# Create a year field
# extract the year from the date string
flbo$Year <- str_sub(flbo$Month, 1, str_length(flbo$Month)-2)

# create the month as a valuable date to explore the temporal pattern
flbo$Month<- paste(flbo$Month,01,sep="")
flbo$Month <- as.Date(as.character(flbo$Month), format = "%Y%m%d")

# extracting just 2017 data
a <- flbo[which(flbo$Year == "2017"),]

# Extracting just data for pharmacies that has full year data (12 flows)
counts <- ddply(a, .(a$Ph_ODS, a$GP_ODS), nrow)
names(counts) <- c("Ph_ODS", "GP_ODS", "Freq")
full_year <- counts[which(counts$Freq == '12'),]
counts2 <- merge(a, full_year, by.x=c("Ph_ODS", "GP_ODS"), by.y=c("Ph_ODS", "GP_ODS"), all.x = TRUE)
final_full <- counts2[which(counts2$Freq == '12'),]

# clean data to defined points
# merge with shp and flow 
# this will ensure there are just the pharmacies and GP's that are also in flow data, all the others will be omitted
fl2 <- merge(final_full, A_gps@data, all.y = T, by = "GP_ODS")
flow <- merge(fl2, A_boots@data, all.x = T, by = "Ph_ODS")

# cutting the unnecessary columns  in our point data
A_boots <- A_boots[c(12,1:11,13:39)]
A_gps <- A_gps[c(2,1,3:25)]

# aggregate the flow for one line per year
ag1 <- data.frame(aggregate(Items ~ GP_ODS + Ph_ODS ,data=flow, sum))

# create line between the poins
# notice the composition of the function
# flow = dataframe with first and second columns representing origin and destination ID's 
# zones = spatialdataframe with first column orgin ID's
# destinations = spatialpointdataframe with first column destination ID's
# this function is very sensitive to NA's and excessive rows, make sure that number of origins and destinations in SPDF's is the same as in flow DF
line <- od2line(flow = ag1, zones = A_gps, destinations = A_boots)

# calculate lenght of the flow
# as we used OSGB projection, this is in metres
line$distance <- lineLength(line, byid = T)


# add the info of the points to our final data
agsp <- merge(line, A_gps@data, all.y = T, by = "GP_ODS")
agsp <- merge(agsp, A_boots@data, all.y = T, by = "Ph_ODS", duplicateGeoms = TRUE)

# crate points from flow
# although the SIM models are happy to run just on dataframe, werequire spatial visualization of the effect of each pharmacy and so we attach the dataframe to pharmacy points
GFL <- merge(A_boots, agsp@data, all.y = T, duplicateGeoms = TRUE)

# correct into numeric fields what needs to be numeric
GFL$GP_Items_PY <- as.numeric(GFL$GP_Items_PY)
GFL$GP_Partners <- as.numeric(GFL$GP_Partners)
GFL$GP_Change <- as.numeric(GFL$GP_Change)
GFL$BO_I_PY <- as.numeric(GFL$BO_I_PY)
GFL$BO_Chng <- as.numeric(GFL$BO_Chng)
GFL$BO_n_competitors <- as.numeric(GFL$BO_n_competitors)
GFL$BO_py_boots_comp <- as.numeric(GFL$BO_py_boots_comp)

# calculate fields into a same format, required for traditional model investigation, effect of the local population on the flow = creating covariates
GFL$BO_elder_prop <- (GFL$BO_elders/GFL$BO_night_coun)*100
GFL$GP_elder_prop <- (GFL$GP_elders/GFL$GP_pop_tot)*100
GFL$BO_eth_prop <- (GFL$BO_ethnics/GFL$BO_night_coun)*100
GFL$GP_eth_prop <- (GFL$GP_ethnics/GFL$GP_pop_tot)*100
GFL$BO_car_prop <- (GFL$BO_no_car/GFL$BO_night_coun)*100
GFL$GP_car_prop <- (GFL$GP_no_car/GFL$GP_pop_tot)*100

# create distance to city centre
# this will be used in investigation of spatial autocorrelation, inclusion of random effect of spatil distribution in a model
GFL$dist_centre <- spDistsN1(GFL, centre, longlat = TRUE)
```

# Modelling time

## All flows

One of the most iportant steps is the order of the data in the data frame. The SIM technique has a comparative character and so all the OD flows are compared to the first one executed, which is the first line in a table.

Here we assume that the best flow is the flow with the most Items on a flow, and so all the others are compared to this one.

Notice that the highest flow between Liverpool Whiston Boots and Aston healthcare practice has 109,227 prescription flow a year, however has distance lenght 2.27 km.

```{r message=FALSE, warning=FALSE}
# set ordeof the flows
GFL <- GFL[order(GFL$Items, decreasing = T),]
head(GFL@data)
```

```{r message=FALSE, warning=FALSE}
# increase number of rows printed by R studio
options(max.print=999999)

# 1 - Unconstrained model of all flows
first <- glm(Items ~ log(GP_Items_PY) + log(BO_I_PY) + distance, na.action = na.exclude, family = poisson(link = "log"), data = GFL)

# 2 - Unconstrained model with covariates for all flows
# running the model with all the catchment variables
second_before <- glm(Items ~ log(GP_Items_PY) + log(BO_I_PY) + distance + dist_centre + GP_Flag +  GP_Partners + BO_eth_prop + GP_elder_prop + GP_MEAN_imd_score + GP_eth_prop + GP_car_prop + BO_attr + BO_py_boots_comp + GP_pop_tot + BO_NHS_Desc + BO_Format  + BO_py_competitors + BO_day_pop + BO_elder_prop + BO_MEAN_imd_s + BO_car_prop + BO_night_coun
, na.action = na.exclude, family = poisson(link = "log"), data = GFL)

# excluding the variables with high VIF; higly biased variables that does not have a significant effect on interaction
second <- glm(Items ~ log(GP_Items_PY) + log(BO_I_PY) + distance + dist_centre + GP_Flag +  GP_Partners + GP_pop_tot + GP_eth_prop + BO_day_pop + BO_Format + BO_py_boots_comp + BO_NHS_Desc + BO_py_competitors, na.action = na.exclude, family = poisson(link = "log"), data = GFL)


 # 3 - Production constrained model for all flows
third <- glm(Items ~ GP_ODS + log(BO_I_PY) +  distance, na.action = na.exclude, family = poisson(link = "log"), data = GFL)


# 4 - Attraction constrained model for all flows
fourth <- glm(Items ~ Ph_ODS +log(GP_Items_PY)  +  distance  
                , na.action = na.exclude, family = poisson(link = "log"), data = GFL)


# 5 - Doubly constrained model for all flows
fifth <- glm(Items ~  GP_ODS + Ph_ODS + distance 
              , na.action = na.exclude, family = poisson(link = "log"), data = GFL)
head(summary(fifth))

# 6 - Random effect included in unconstrained model for all flows - mixed effect model
# random <- glmer(Items ~ GP_ODS + log(BO_I_PY) +  distance + (1|dist_centre) ,  family = poisson(link = "log"), data = GFL@data)
```


### Validation of the models

```{r message=FALSE, warning=FALSE}
# create table with R2 of each model
R2logit<- function(y,model){
    R2<- 1-(model$deviance/model$null.deviance)
    return(R2)
}

r2s <- data.frame(model=c( 'first', 'second', 'third','fourth', 'fifth'),
                      R2_logit=c(
                              R2logit(Items, first),
                              R2logit(Items, second),
                             R2logit(Items, third),
                             R2logit(Items, fourth),
                             R2logit(Items, fifth)))
r2s


# create table with AIC of each model
AIC(first, second, third, fourth, fifth)

# create table with RMSE for each model
rmses <- data.frame(model=c( 'first', 'second', 'third','fourth', 'fifth'),
                      RMSE=c(
                              rmse(GFL$Items, first$fitted.values),
                              rmse(GFL$Items, second$fitted.values),
                             rmse(GFL$Items, third$fitted.values),
                             rmse(GFL$Items, fourth$fitted.values),
                             rmse(GFL$Items, fifth$fitted.values)
                            
                           )
                      )
rmses
```

### Model diagnostics

```{r message=FALSE, warning=FALSE}
# create plots with model examination - cooks distance, residuals distribution, outliers, etc.

# first
print(
par(mfrow=c(2,2)),
plot(first)
)


# second
print(
par(mfrow=c(2,2)),
plot(second)
)

# third
print(
par(mfrow=c(2,2)),
plot(third)
)

# fourth

print(
par(mfrow=c(2,2)),
plot(fourth)
)

# fifth
print(
par(mfrow=c(2,2)),
plot(fifth)
)
```

### Predictive check

```{r message=FALSE, warning=FALSE}
# create a function that generate actual distribution and posterior distribution along with sample distributions, to check the prediction uncertainty
# copyright @darribas

generate_draw_poi <- function(m){
  # Set up predictors matrix
  x <- model.matrix(m)
  # Obtain draws of parameters (inferential uncertainty)
  sim_bs <- sim(m, 1)
  # Predicted value
  xb <- x %*% sim_bs@coef[1, ]
  #xb <- x %*% m$coefficients
  # Transform using the link function
  mu <- exp(xb)
  # Obtain a random realization
  y_hat <- rpois(n=length(mu), lambda=mu)
  return(y_hat)
}
```

```{r message=FALSE, warning=FALSE}
# Call plots with density lines
# predictive check for model 1 - unconstrained for all flows
plot(density(first$fitted.values), 
     xlim=c(-100, 5000),
     ylim=c(0, max(c(
                  max(density(first$fitted.values)$y), 
                  max(density(GFL$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(first)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(first$fitted.values), 
      col='black',
      main='')
lines(density(GFL$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Set 1: All flows - Simple unconstrained")


# predictive check for model 2 - unconstrained with covariates for all flows
plot(density(second$fitted.values), 
     xlim=c(-100, 5000),
     ylim=c(0, max(c(
                  max(density(second$fitted.values)$y), 
                  max(density(GFL$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(second)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(second$fitted.values), 
      col='black',
      main='')
lines(density(GFL$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Set 1: All flows - Unconstrained with covariates")


# predictive check for model 3 - production constrained for all flows
plot(density(third$fitted.values), 
     xlim=c(-100, 5000),
     ylim=c(0, max(c(
                  max(density(third$fitted.values)$y), 
                  max(density(GFL$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(third)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(third$fitted.values), 
      col='black',
      main='')
lines(density(GFL$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Set 1: All flows - Production constrained")


# predictive check for model 4 - attraction constrained for all flows
plot(density(fourth$fitted.values), 
     xlim=c(-100, 5000),
     ylim=c(0, max(c(
                  max(density(fourth$fitted.values)$y), 
                  max(density(GFL$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(fourth)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(fourth$fitted.values), 
      col='black',
      main='')
lines(density(GFL$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Set 1: All flows - Attraction constrained")


# predictive check for model 5 - doubly constrained for all flows
plot(density(fifth$fitted.values), 
     xlim=c(-100, 5000),
     ylim=c(0, max(c(
                  max(density(fifth$fitted.values)$y), 
                  max(density(GFL$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(fifth)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(fifth$fitted.values), 
      col='black',
      main='')
lines(density(GFL$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Set 1: All flows - Doubly constrained")


```
 
### Building matrix for understanding flows
```{r message=FALSE, warning=FALSE}
# matrix using all flow data
cdatasubmat6 <- dcast(GFL@data, GP_ODS ~ Ph_ODS, sum, value.var = "Items", margins=c("GP_ODS", "Ph_ODS"))
head(cdatasubmat6)
```

```{r message=FALSE, warning=FALSE}
# matrix that uses double constrained model of all flows
GFL$fifthFitted <- round(fitted(fifth),0)
mat6 <- dcast(GFL@data, GP_ODS ~ Ph_ODS, sum, value.var = "fifthFitted", margins=c("GP_ODS", "Ph_ODS"))
head(mat6)
```


## Modelling the highest flows

```{r message=FALSE, warning=FALSE}
# select just the first 500 rows of the flow data
GFH <- GFL[1:500, ]
```


```{r message=FALSE, warning=FALSE}
# run the models

# 7 - Unconstrained model
selfirst <- glm(Items ~ log(GP_Items_PY) + log(BO_I_PY) + distance , na.action = na.exclude, family = poisson(link = "log"), data = GFH)

# 8 - Unconstrained model with covariates
selsecond <- glm(Items ~ log(GP_Items_PY) + log(BO_I_PY) + distance + dist_centre + GP_Flag +  GP_Partners + GP_pop_tot + GP_eth_prop + BO_day_pop + BO_Format + BO_py_boots_comp + BO_NHS_Desc + BO_py_competitors , na.action = na.exclude, family = poisson(link = "log"), data = GFH)

# 9 - Production constrained model 
selthird <- glm(Items ~ GP_ODS  + log(BO_I_PY) +  distance
               , na.action = na.exclude, family = poisson(link = "log"), data = GFH)

# 10 - Attraction constrained model
selfourth <- glm(Items ~ Ph_ODS +log(GP_Items_PY)  +  distance  
                , na.action = na.exclude, family = poisson(link = "log"), data = GFH)

# 11 - Doubly constrained model
selfifth <- glm(Items ~  GP_ODS + Ph_ODS + distance 
              , na.action = na.exclude, family = poisson(link = "log"), data = GFH)

# 12 - Mixed effect model
# selrandom <- glmer(Items ~ GP_ODS + log(BO_I_PY) +  distance + (1|dist_centre) ,  family = poisson(link = "log"), data = GFH@data)
```

```{r message=FALSE, warning=FALSE}
# R2, AIC, RMSE
r2s <- data.frame(model=c( 'selfirst', 'selsecond', 'selthird','selfourth', 'selfifth'),
                      R2_logit=c(
                              R2logit(Items, selfirst),
                              R2logit(Items, selsecond),
                             R2logit(Items, selthird),
                             R2logit(Items, selfourth),
                             R2logit(Items, selfifth)))
r2s
AIC(selfirst, selsecond, selthird, selfourth, selfifth)

rmses <- data.frame(model=c( 'selfirst', 'selsecond', 'selthird','selfourth', 'selfifth'),
                      RMSE=c(
                              rmse(GFH$Items, selfirst$fitted.values),
                              rmse(GFH$Items, selsecond$fitted.values),
                             rmse(GFH$Items, selthird$fitted.values),
                             rmse(GFH$Items, selfourth$fitted.values),
                             rmse(GFH$Items, selfifth$fitted.values)
                            
                           )
                      )
rmses
```

```{r message=FALSE, warning=FALSE}
# Model diagnostics

# 7 - Unconstrained model
print(
par(mfrow=c(2,2)),
plot(selfirst)
)


# 8 - Unconstrained model with covariates
print(
par(mfrow=c(2,2)),
plot(selsecond)
)


# 9 - Production constrained model 
print(
par(mfrow=c(2,2)),
plot(selthird)
)


# 10 - Attraction constrained model
print(
par(mfrow=c(2,2)),
plot(selfourth)
)


# 11 - Doubly constrained model
print(
par(mfrow=c(2,2)),
plot(selfifth)
)

```

```{r message=FALSE, warning=FALSE}
# predictive check

# 7 - Unconstrained model
plot(density(selfirst$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(selfirst$fitted.values)$y), 
                  max(density(GFH$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(selfirst)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(selfirst$fitted.values), 
      col='black',
      main='')
lines(density(GFH$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Simple unconstrained - 500 highest flows")


# 8 - Unconstrained model with covariates
plot(density(selsecond$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(selsecond$fitted.values)$y), 
                  max(density(GFH$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(selsecond)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(selsecond$fitted.values), 
      col='black',
      main='')
lines(density(GFH$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Unconstrained with covariates - 500 highest flows")


# 9 - Production constrained model 
plot(density(selthird$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(selthird$fitted.values)$y), 
                  max(density(GFH$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(selthird)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(selthird$fitted.values), 
      col='black',
      main='')
lines(density(GFH$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Production constrained - 500 highest flows")


# 10 - Attraction constrained model
plot(density(selfourth$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(selfourth$fitted.values)$y), 
                  max(density(GFH$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(selfourth)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(selfourth$fitted.values), 
      col='black',
      main='')
lines(density(GFH$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Attraction constrained - 500 highest flows")


# 11 - Doubly constrained model
plot(density(selfifth$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(selfifth$fitted.values)$y), 
                  max(density(GFH$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(selfifth)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
#
lines(density(selfifth$fitted.values), 
      col='black',
      main='')
lines(density(GFH$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Doubly constrained - 500 highest flows")


```

## Modelling interegional flows

```{r message=FALSE, warning=FALSE}
# selecting just the flows within distance of 800 metres
GFI <- GFL[which(GFL$distance < 800), ]
```


```{r message=FALSE, warning=FALSE}
# modelling interregional flows
# 13 - Unconstrained model
intfirst <- glm(Items ~ log(GP_Items_PY) + log(BO_I_PY) + distance , na.action = na.exclude, family = poisson(link = "log"), data = GFI)

# 14 - Unconstrained model with covariates
intsecond <- glm(Items ~ log(GP_Items_PY) + log(BO_I_PY) + distance + dist_centre + GP_Flag +  GP_Partners + GP_pop_tot + GP_eth_prop + BO_day_pop + BO_Format + BO_py_boots_comp + BO_NHS_Desc + BO_py_competitors , na.action = na.exclude, family = poisson(link = "log"), data = GFI)

# 15 - Production constrained model 
intthird <- glm(Items ~ GP_ODS  + log(BO_I_PY) +  distance 
               , na.action = na.exclude, family = poisson(link = "log"), data = GFI)

# 16 - Attraction constrained model
intfourth <- glm(Items ~ Ph_ODS +log(GP_Items_PY)  +  distance  
                , na.action = na.exclude, family = poisson(link = "log"), data = GFI)

# 17 - Doubly constrained model
intfifth <- glm(Items ~  GP_ODS + Ph_ODS + distance 
              , na.action = na.exclude, family = poisson(link = "log"), data = GFI)

# 18 - Mixed effect model
# intrandom <- glmer(Items ~ GP_ODS + log(BO_I_PY) +  distance + (1|dist_centre) ,  family = poisson(link = "log"), data = GFI@data)
```

```{r message=FALSE, warning=FALSE}
# R2, AIC, RMSE
r2s <- data.frame(model=c( 'intfirst', 'intsecond', 'intthird','intfourth', 'intfifth'),
                      R2_logit=c(
                              R2logit(Items, intfirst),
                              R2logit(Items, intsecond),
                             R2logit(Items, intthird),
                             R2logit(Items, intfourth),
                             R2logit(Items, intfifth)))
r2s

AIC(intfirst, intsecond, intthird, intfourth, intfifth)

rmses <- data.frame(model=c( 'intfirst', 'intsecond', 'intthird','intfourth', 'intfifth'),
                      RMSE=c(
                              rmse(GFI$Items, intfirst$fitted.values),
                              rmse(GFI$Items, intsecond$fitted.values),
                             rmse(GFI$Items, intthird$fitted.values),
                             rmse(GFI$Items, intfourth$fitted.values),
                             rmse(GFI$Items, intfifth$fitted.values)
                            
                           )
                      )
rmses
```

```{r message=FALSE, warning=FALSE}
# model diagnostics
# 13 - Unconstrained model
print(
par(mfrow=c(2,2)),
plot(intfirst)
)


# 14 - Unconstrained model with covariates
print(
par(mfrow=c(2,2)),
plot(intsecond)
)


# 15 - Production constrained model 
print(
par(mfrow=c(2,2)),
plot(intthird)
)


# 16 - Attraction constrained model
print(
par(mfrow=c(2,2)),
plot(intfourth)
)


# 17 - Doubly constrained model
print(
par(mfrow=c(2,2)),
plot(intfifth)
)

```

```{r message=FALSE, warning=FALSE}
# Predictive check
# 13 - Unconstrained model
plot(density(intfirst$fitted.values), 
     xlim=c(-100, 100000),
     ylim=c(0, max(c(
                  max(density(intfirst$fitted.values)$y), 
                  max(density(GFI$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(intfirst)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(intfirst$fitted.values), 
      col='black',
      main='')
lines(density(GFI$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Simple unconstrained - Interregional flows (800m)")


# 14 - Unconstrained model with covariates
plot(density(intsecond$fitted.values), 
     xlim=c(-100, 100000),
     ylim=c(0, max(c(
                  max(density(intsecond$fitted.values)$y), 
                  max(density(GFI$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(intsecond)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
#
lines(density(intsecond$fitted.values), 
      col='black',
      main='')
lines(density(GFI$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Unconstrained with covariates - Interregional flows (800m)")


# 15 - Production constrained model 
plot(density(intthird$fitted.values), 
     xlim=c(-100, 100000),
     ylim=c(0, max(c(
                  max(density(intthird$fitted.values)$y), 
                  max(density(GFI$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(intthird)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(intthird$fitted.values), 
      col='black',
      main='')
lines(density(GFI$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Production constrained - Interregional flows (800m)")


# 16 - Attraction constrained model
plot(density(intfourth$fitted.values), 
     xlim=c(-100, 100000),
     ylim=c(0, max(c(
                  max(density(intfourth$fitted.values)$y), 
                  max(density(GFI$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(intfourth)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(intfourth$fitted.values), 
      col='black',
      main='')
lines(density(GFI$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Attraction constrained - Interregional flows (800m)")


# 17 - Doubly constrained model
plot(density(intfifth$fitted.values), 
     xlim=c(-100, 100000),
     ylim=c(0, max(c(
                  max(density(intfifth$fitted.values)$y), 
                  max(density(GFI$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(intfifth)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(intfifth$fitted.values), 
      col='black',
      main='')
lines(density(GFI$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Doubly constrained - Interregional flows (800m)")


```




## Modelling flows above 100 items per year
```{r message=FALSE, warning=FALSE}
# Selecting rows withmore then 100 items
GFM <- GFL[which(GFL$Items > 100), ]
```

```{r message=FALSE, warning=FALSE}
# defining models
# 19 - Unconstrained model
minfirst <- glm(Items ~ log(GP_Items_PY) + log(BO_I_PY) + distance , na.action = na.exclude, family = poisson(link = "log"), data = GFM)

# 20 - Unconstrained model with covariates
minsecond <- glm(Items ~ log(GP_Items_PY) + log(BO_I_PY) + distance + dist_centre + GP_Flag +  GP_Partners + GP_pop_tot + GP_eth_prop + BO_day_pop + BO_Format + BO_py_boots_comp + BO_NHS_Desc + BO_py_competitors , na.action = na.exclude, family = poisson(link = "log"), data = GFM)

# 21 - Production constrained model 
minthird <- glm(Items ~ GP_ODS  + log(BO_I_PY) +  distance 
               , na.action = na.exclude, family = poisson(link = "log"), data = GFM)

# 22 - Attraction constrained model
minfourth <- glm(Items ~ Ph_ODS +log(GP_Items_PY)  +  distance  
                , na.action = na.exclude, family = poisson(link = "log"), data = GFM)

# 23 - Doubly constrained model
minfifth <- glm(Items ~  GP_ODS + Ph_ODS + distance 
              , na.action = na.exclude, family = poisson(link = "log"), data = GFM)

# 24 - Mixed effect model
# minrandom <- glmer(Items ~ GP_ODS + log(BO_I_PY) +  distance + (1|dist_centre) ,  family = poisson(link = "log"), data = GFM@data)
```

```{r message=FALSE, warning=FALSE}
# R2, AIC, RMSE
r2s <- data.frame(model=c( 'minfirst', 'minsecond', 'minthird','minfourth', 'minfifth'),
                      R2_logit=c(
                              R2logit(Items, minfirst),
                              R2logit(Items, minsecond),
                             R2logit(Items, minthird),
                             R2logit(Items, minfourth),
                             R2logit(Items, minfifth)))
r2s

AIC(minfirst, minsecond, minthird, minfourth, minfifth)

rmses <- data.frame(model=c( 'minfirst', 'minsecond', 'minthird','minfourth', 'minfifth'),
                      RMSE=c(
                              rmse(GFM$Items, minfirst$fitted.values),
                              rmse(GFM$Items, minsecond$fitted.values),
                             rmse(GFM$Items, minthird$fitted.values),
                             rmse(GFM$Items, minfourth$fitted.values),
                             rmse(GFM$Items, minfifth$fitted.values)
                            
                           )
                      )
rmses
```

```{r message=FALSE, warning=FALSE}
# model diagnostics
# 19 - Unconstrained model
print(
par(mfrow=c(2,2)),
plot(minfirst)
)


# 20 - Unconstrained model with covariates
print(
par(mfrow=c(2,2)),
plot(minsecond)
)



# 21 - Production constrained model 
print(
par(mfrow=c(2,2)),
plot(minthird)
)


# 22 - Attraction constrained model
print(
par(mfrow=c(2,2)),
plot(minfourth)
)


# 23 - Doubly constrained model
print(
par(mfrow=c(2,2)),
plot(minfifth)
)

```

```{r message=FALSE, warning=FALSE}
# Predictive plot
# 19 - Unconstrained model
plot(density(minfirst$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(minfirst$fitted.values)$y), 
                  max(density(GFM$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(minfirst)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(minfirst$fitted.values), 
      col='black',
      main='')
lines(density(GFM$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Simple unconstrained - without flows below 100")


# 20 - Unconstrained model with covariates
plot(density(minsecond$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(minsecond$fitted.values)$y), 
                  max(density(GFM$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(minsecond)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(minsecond$fitted.values), 
      col='black',
      main='')
lines(density(GFM$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Unconstrained with covariates - without flows below 100")


# 21 - Production constrained model 
plot(density(minthird$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(minthird$fitted.values)$y), 
                  max(density(GFM$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(minthird)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(minthird$fitted.values), 
      col='black',
      main='')
lines(density(GFM$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Production constrained - without flows below 100")


# 22 - Attraction constrained model
plot(density(minfourth$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(minfourth$fitted.values)$y), 
                  max(density(GFM$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(minfourth)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(minfourth$fitted.values), 
      col='black',
      main='')
lines(density(GFM$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Attraction constrained - without flows below 100")


# 23 - Doubly constrained model
plot(density(minfifth$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(minfifth$fitted.values)$y), 
                  max(density(GFM$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(minfifth)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(minfifth$fitted.values), 
      col='black',
      main='')
lines(density(GFM$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Doubly constrained - without flows below 100")
```

## Modelling flows above the mean Item from  all flows

```{r message=FALSE, warning=FALSE}
# generate mean flow
Meanflow <- mean(GFL$Items)
# selest flows above 771 Items
GFX <- GFL[which(GFL$Items > Meanflow), ]
```

```{r message=FALSE, warning=FALSE}
# defining models
# 25 - Unconstrained model
maxfirst <- glm(Items ~ log(GP_Items_PY) + log(BO_I_PY) + distance , na.action = na.exclude, family = poisson(link = "log"), data = GFX)

# 26 - Unconstrained model with covariates
maxsecond <- glm(Items ~ log(GP_Items_PY) + log(BO_I_PY) + distance + dist_centre + GP_Flag +  GP_Partners + GP_pop_tot + GP_eth_prop + BO_day_pop + BO_Format + BO_py_boots_comp + BO_NHS_Desc + BO_py_competitors , na.action = na.exclude, family = poisson(link = "log"), data = GFX)

# 27 - Production constrained model 
maxthird <- glm(Items ~ GP_ODS  + log(BO_I_PY) +  distance 
               , na.action = na.exclude, family = poisson(link = "log"), data = GFX)

# 28 - Attraction constrained model
maxfourth <- glm(Items ~ Ph_ODS +log(GP_Items_PY)  +  distance  
                , na.action = na.exclude, family = poisson(link = "log"), data = GFX)

# 29 - Doubly constrained model
maxfifth <- glm(Items ~  GP_ODS + Ph_ODS + distance 
              , na.action = na.exclude, family = poisson(link = "log"), data = GFX)

# 30 - Mixed effect model
# maxrandom <- glmer(Items ~ GP_ODS + log(BO_I_PY) +  distance + (1|dist_centre) ,  family = poisson(link = "log"), data = GFX@data)
```

```{r message=FALSE, warning=FALSE}
# R2, AIc, RMSE
r2s <- data.frame(model=c( 'maxfirst', 'maxsecond', 'maxthird','maxfourth', 'maxfifth'),
                      R2_logit=c(
                              R2logit(Items, maxfirst),
                              R2logit(Items, maxsecond),
                             R2logit(Items, maxthird),
                             R2logit(Items, maxfourth),
                             R2logit(Items, maxfifth)))
r2s

AIC(maxfirst, maxsecond, maxthird, maxfourth, maxfifth)

rmses <- data.frame(model=c( 'maxfirst', 'maxsecond', 'maxthird','maxfourth', 'maxfifth'),
                      RMSE=c(
                              rmse(GFX$Items, maxfirst$fitted.values),
                              rmse(GFX$Items, maxsecond$fitted.values),
                             rmse(GFX$Items, maxthird$fitted.values),
                             rmse(GFX$Items, maxfourth$fitted.values),
                             rmse(GFX$Items, maxfifth$fitted.values)
                            
                           )
                      )
rmses
```

```{r message=FALSE, warning=FALSE}
# model diagnostics
# 25 - Unconstrained model
print(
par(mfrow=c(2,2)),
plot(maxfirst)
)


# 26 - Unconstrained model with covariates
print(
par(mfrow=c(2,2)),
plot(maxsecond)
)


# 27 - Production constrained model 
print(
par(mfrow=c(2,2)),
plot(maxthird)
)


# 28 - Attraction constrained model
print(
par(mfrow=c(2,2)),
plot(maxfourth)
)


# 29 - Doubly constrained model
print(
par(mfrow=c(2,2)),
plot(maxfifth)
)

```

```{r message=FALSE, warning=FALSE}
# predictive check
# 25 - Unconstrained model
plot(density(maxfirst$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(maxfirst$fitted.values)$y), 
                  max(density(GFX$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(maxfirst)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(maxfirst$fitted.values), 
      col='black',
      main='')
lines(density(GFX$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Simple unconstrained - without flows below the mean (771)")


# 26 - Unconstrained model with covariates
plot(density(maxsecond$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(maxsecond$fitted.values)$y), 
                  max(density(GFX$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(maxsecond)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(maxsecond$fitted.values), 
      col='black',
      main='')
lines(density(GFX$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Unconstrained with covariates - without flows below the mean (771)")


# 27 - Production constrained model 
plot(density(maxthird$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(maxthird$fitted.values)$y), 
                  max(density(GFX$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(maxthird)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(maxthird$fitted.values), 
      col='black',
      main='')
lines(density(GFX$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Production constrained - without flows below the mean (771)")


# 28 - Attraction constrained model
plot(density(maxfourth$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(maxfourth$fitted.values)$y), 
                  max(density(GFX$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(maxfourth)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(maxfourth$fitted.values), 
      col='black',
      main='')
lines(density(GFX$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Attraction constrained - without flows below the mean (771)")


# 29 - Doubly constrained model
plot(density(maxfifth$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(maxfifth$fitted.values)$y), 
                  max(density(GFX$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(maxfifth)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(maxfifth$fitted.values), 
      col='black',
      main='')
lines(density(GFX$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Doubly constrained - without flows below the mean (771)")

```

## Modelling flows within walking distance 1600m

```{r message=FALSE, warning=FALSE}
# Defining flows within 1600 distance
GFW <- GFL[which(GFL$distance < 1600), ]
```

```{r message=FALSE, warning=FALSE}
# defining models
# 31 - Unconstrained model
walkfirst <- glm(Items ~ log(GP_Items_PY) + log(BO_I_PY) + distance , na.action = na.exclude, family = poisson(link = "log"), data = GFW)

# 32 - Unconstrained model with covariates
walksecond <- glm(Items ~ log(GP_Items_PY) + log(BO_I_PY) + distance + dist_centre + GP_Flag +  GP_Partners + GP_pop_tot + GP_eth_prop + BO_day_pop + BO_Format + BO_py_boots_comp + BO_NHS_Desc + BO_py_competitors , na.action = na.exclude, family = poisson(link = "log"), data = GFW)

# 33 - Production constrained model 
walkthird <- glm(Items ~ GP_ODS  + log(BO_I_PY) +  distance  , na.action = na.exclude, family = poisson(link = "log"), data = GFW)

# 34 - Attraction constrained model
walkfourth <- glm(Items ~ Ph_ODS +log(GP_Items_PY)  +  distance , na.action = na.exclude, family = poisson(link = "log"), data = GFW)

# 35 - Doubly constrained model
walkfifth <- glm(Items ~  GP_ODS + Ph_ODS + distance, na.action = na.exclude, family = poisson(link = "log"), data = GFW)
```

```{r message=FALSE, warning=FALSE}
# R2, AIC, RMSE
r2s <- data.frame(model=c( 'walkfirst', 'walksecond', 'walkthird','walkfourth', 'walkfifth'),
                      R2_logit=c(
                              R2logit(Items, walkfirst),
                              R2logit(Items, walksecond),
                             R2logit(Items, walkthird),
                             R2logit(Items, walkfourth),
                             R2logit(Items, walkfifth)))
r2s

AIC(walkfirst, walksecond, walkthird, walkfourth, walkfifth)

rmses <- data.frame(model=c( 'walkfirst', 'walksecond', 'walkthird','walkfourth', 'walkfifth'),
                      RMSE=c(
                              rmse(GFW$Items, walkfirst$fitted.values),
                              rmse(GFW$Items, walksecond$fitted.values),
                             rmse(GFW$Items, walkthird$fitted.values),
                             rmse(GFW$Items, walkfourth$fitted.values),
                             rmse(GFW$Items, walkfifth$fitted.values)
                            
                           )
                      )
rmses
```

```{r message=FALSE, warning=FALSE}
# model diagnostics
# 31 - Unconstrained model
print(
par(mfrow=c(2,2)),
plot(walkfirst)
)


# 32 - Unconstrained model with covariates
print(
par(mfrow=c(2,2)),
plot(walksecond)
)


# 33 - Production constrained model 
print(
par(mfrow=c(2,2)),
plot(walkthird)
)


# 34 - Attraction constrained model
print(
par(mfrow=c(2,2)),
plot(walkfourth)
)


# 35 - Doubly constrained model
print(
par(mfrow=c(2,2)),
plot(walkfifth)
)

```

```{r message=FALSE, warning=FALSE}
# predictive check
# 31 - Unconstrained model
plot(density(walkfirst$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(walkfirst$fitted.values)$y), 
                  max(density(GFW$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(walkfirst)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(walkfirst$fitted.values), 
      col='black',
      main='')
lines(density(GFW$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Simple unconstrained - Interregional flows (1600m)")


# 32 - Unconstrained model with covariates
plot(density(walksecond$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(walksecond$fitted.values)$y), 
                  max(density(GFW$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(walksecond)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(walksecond$fitted.values), 
      col='black',
      main='')
lines(density(GFW$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Unconstrained with covariates - Interregional flows (1600m)")


# 33 - Production constrained model 
plot(density(walkthird$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(walkthird$fitted.values)$y), 
                  max(density(GFW$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(walkthird)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(walkthird$fitted.values), 
      col='black',
      main='')
lines(density(GFW$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Production constrained - Interregional flows (1600m)")


# 34 - Attraction constrained model
plot(density(walkfourth$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(walkfourth$fitted.values)$y), 
                  max(density(GFW$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(walkfourth)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(walkfourth$fitted.values), 
      col='black',
      main='')
lines(density(GFW$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Attraction constrained - Interregional flows (1600m)")


# 35 - Doubly constrained model
plot(density(walkfifth$fitted.values), 
     xlim=c(-100, 20000),
     ylim=c(0, max(c(
                  max(density(walkfifth$fitted.values)$y), 
                  max(density(GFW$Items)$y)
                  )
               )
      ),
     col='white',
     main='')
# Loop for realizations
for(i in 1:300){
  tmp_y <- generate_draw_poi(walkfifth)
  lines(density(tmp_y),
        col='green',
        lwd=0.5
        )
}
lines(density(maxfifth$fitted.values), 
      col='black',
      main='')
lines(density(GFW$Items), 
      col='red',
      main='')
legend('topright', 
       c('Predicted', 'Actual', 'Simulated (n=300)'),
       col=c('black', 'red', 'green'),
       lwd=1)
title(main="Predictive check - Doubly constrained - Interregional flows (1600m)")

```

# Export the estimates from model

Here is example of how the extract the coefficient estimates from the model, link them to our GP and pharmacy point data and export like a shapefile. 

The coefficient could be easily visualized in R, Python or other platform such as QGis, depends on personal preferences.

```{r}
# save the coefs to a dataframe
coefs800 <- data.frame(coef(summary(intthird)))
coefs800GP <- coefs800[2:108,]
coefs800PH <- coefs800[109:123,]

# extract ODS code
coefs800GP$ID <- rownames(coefs800GP)
coefs800PH$ID <- rownames(coefs800PH)

coefs800GP$GP_ODS <- as.character(substring(coefs800GP$ID, 7))
coefs800PH$Ph_ODS <- as.character(substring(coefs800PH$ID, 7))

#merge with 
cutgp8 <- merge(A_gps, coefs800GP, by='GP_ODS', all.y=T)
cutph8 <- merge(A_boots, coefs800PH, by='Ph_ODS', all.y=T)

#export
writeOGR(obj=cutgp8, dsn="E:/Dissertation/arc/x", layer="800fifth_GP", driver="ESRI Shapefile")
writeOGR(obj=cutph8, dsn="E:/Dissertation/arc/x", layer="800fifth_PH", driver="ESRI Shapefile") 
```

# Final thoughts

Constrained spatial interaction models are significantly more efficient then any gravity models or traditional catchment profile regressions. The approach allows us to find a deficiency in the spatial interaction between the GP's and pharmacies, however, this is very much dependent on two asumptions applied in the modelling process. 

1. It is important to order the data according to what's the purpose of the modeling. The model assumes that the first row of the data is 'the best' or 'ideal' flow that the others are compared with, therefor our model assumes that the best performing flow has the most prescribtions but its lenght is more than 2 km. Changing this assumption and placing a flow with less prescribtions but lenght of less than 2 meters, significantly chnage the result. Although this might seem to be a better for the purposes of the analysis, such a manipulation usually leads to misinterpretation and model's overfitting. 

2. The model does not account for any general difference between different types of pharmacies or GP's that have generaly different character such as pharmacy sizes or GP size. For example General Practice with only one GP will obviously going to have naturally lower performance than practice with 8 practicioners. Accordingly, Boots pharmacy defined as High street pharmacy will have naturally different character of the flows than retail park pharmacy or local pharmacy. Runnig model selecting just flows within the classification and comparing the result to result from modelling all pharmacies could reval hidden pattern of flow efficiency.

For any questions or inquires, contact me on haska.lenka@gmail.com 
